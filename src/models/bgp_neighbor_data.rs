/*
 * Packet API
 *
 * This is the API for Packet. Interact with your devices, user account, and projects.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@packet.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BgpNeighborData {
    /// Address Family for IP Address
    #[serde(rename = "address_family", skip_serializing_if = "Option::is_none")]
    pub address_family: Option<f32>,
    /// The customer's ASN. In a local BGP deployment, this will be an internal ASN used to route within the data center. For a global BGP deployment, this will be the your own ASN, configured when you set up BGP for your project.
    #[serde(rename = "customer_as", skip_serializing_if = "Option::is_none")]
    pub customer_as: Option<f32>,
    /// The device's IP address. For an IPv4 BGP session, this is typically the private bond0 address for the device.
    #[serde(rename = "customer_ip", skip_serializing_if = "Option::is_none")]
    pub customer_ip: Option<String>,
    /// True if an MD5 password is configured for the project.
    #[serde(rename = "md5_enabled", skip_serializing_if = "Option::is_none")]
    pub md5_enabled: Option<bool>,
    /// The MD5 password configured for the project, if set.
    #[serde(rename = "md5_password", skip_serializing_if = "Option::is_none")]
    pub md5_password: Option<String>,
    /// True when the BGP session should be configured as multihop.
    #[serde(rename = "multihop", skip_serializing_if = "Option::is_none")]
    pub multihop: Option<bool>,
    /// The Peer ASN to use when configuring BGP on your device.
    #[serde(rename = "peer_as", skip_serializing_if = "Option::is_none")]
    pub peer_as: Option<f32>,
    /// A list of one or more IP addresses to use for the Peer IP section of your BGP configuration. For non-multihop sessions, this will typically be a single gateway address for the device. For multihop sessions, it will be a list of IPs.
    #[serde(rename = "peer_ips", skip_serializing_if = "Option::is_none")]
    pub peer_ips: Option<Vec<String>>,
    /// A list of project subnets
    #[serde(rename = "routes_in", skip_serializing_if = "Option::is_none")]
    pub routes_in: Option<Vec<crate::models::BgpNeighborDataRoutesIn>>,
    /// A list of outgoing routes. Only populated if the BGP session has default route enabled.
    #[serde(rename = "routes_out", skip_serializing_if = "Option::is_none")]
    pub routes_out: Option<Vec<crate::models::BgpNeighborDataRoutesOut>>,
}

impl BgpNeighborData {
    pub fn new() -> BgpNeighborData {
        BgpNeighborData {
            address_family: None,
            customer_as: None,
            customer_ip: None,
            md5_enabled: None,
            md5_password: None,
            multihop: None,
            peer_as: None,
            peer_ips: None,
            routes_in: None,
            routes_out: None,
        }
    }
}


