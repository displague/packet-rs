/*
 * Packet API
 *
 * This is the API for Packet. Interact with your devices, user account, and projects.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@packet.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Device {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "short_id", skip_serializing_if = "Option::is_none")]
    pub short_id: Option<String>,
    #[serde(rename = "hostname", skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    #[serde(rename = "image_url", skip_serializing_if = "Option::is_none")]
    pub image_url: Option<String>,
    #[serde(rename = "billing_cycle", skip_serializing_if = "Option::is_none")]
    pub billing_cycle: Option<String>,
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(rename = "iqn", skip_serializing_if = "Option::is_none")]
    pub iqn: Option<String>,
    #[serde(rename = "locked", skip_serializing_if = "Option::is_none")]
    pub locked: Option<bool>,
    #[serde(rename = "bonding_mode", skip_serializing_if = "Option::is_none")]
    pub bonding_mode: Option<i32>,
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    #[serde(rename = "spot_instance", skip_serializing_if = "Option::is_none")]
    pub spot_instance: Option<bool>,
    #[serde(rename = "spot_price_max", skip_serializing_if = "Option::is_none")]
    pub spot_price_max: Option<f32>,
    #[serde(rename = "termination_time", skip_serializing_if = "Option::is_none")]
    pub termination_time: Option<String>,
    #[serde(rename = "customdata", skip_serializing_if = "Option::is_none")]
    pub customdata: Option<String>,
    #[serde(rename = "provisioning_percentage", skip_serializing_if = "Option::is_none")]
    pub provisioning_percentage: Option<f32>,
    #[serde(rename = "operating_system", skip_serializing_if = "Option::is_none")]
    pub operating_system: Option<crate::models::OperatingSystem>,
    #[serde(rename = "always_pxe", skip_serializing_if = "Option::is_none")]
    pub always_pxe: Option<bool>,
    #[serde(rename = "ipxe_script_url", skip_serializing_if = "Option::is_none")]
    pub ipxe_script_url: Option<String>,
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<crate::models::HardwareLocation>,
    #[serde(rename = "facility", skip_serializing_if = "Option::is_none")]
    pub facility: Option<crate::models::Facility>,
    #[serde(rename = "plan", skip_serializing_if = "Option::is_none")]
    pub plan: Option<crate::models::Plan>,
    #[serde(rename = "userdata", skip_serializing_if = "Option::is_none")]
    pub userdata: Option<String>,
    #[serde(rename = "root_password", skip_serializing_if = "Option::is_none")]
    pub root_password: Option<String>,
    #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
    pub href: Option<String>,
    #[serde(rename = "project", skip_serializing_if = "Option::is_none")]
    pub project: Option<crate::models::Href>,
    #[serde(rename = "project_lite", skip_serializing_if = "Option::is_none")]
    pub project_lite: Option<crate::models::Href>,
    #[serde(rename = "volumes", skip_serializing_if = "Option::is_none")]
    pub volumes: Option<Vec<crate::models::Href>>,
    #[serde(rename = "hardware_reservation", skip_serializing_if = "Option::is_none")]
    pub hardware_reservation: Option<crate::models::Href>,
    #[serde(rename = "ssh_keys", skip_serializing_if = "Option::is_none")]
    pub ssh_keys: Option<Vec<crate::models::Href>>,
    #[serde(rename = "ip_addresses", skip_serializing_if = "Option::is_none")]
    pub ip_addresses: Option<Vec<crate::models::IpAssignment>>,
    #[serde(rename = "provisioning_events", skip_serializing_if = "Option::is_none")]
    pub provisioning_events: Option<Vec<crate::models::Event>>,
}

impl Device {
    pub fn new() -> Device {
        Device {
            id: None,
            short_id: None,
            hostname: None,
            description: None,
            state: None,
            tags: None,
            image_url: None,
            billing_cycle: None,
            user: None,
            iqn: None,
            locked: None,
            bonding_mode: None,
            created_at: None,
            updated_at: None,
            spot_instance: None,
            spot_price_max: None,
            termination_time: None,
            customdata: None,
            provisioning_percentage: None,
            operating_system: None,
            always_pxe: None,
            ipxe_script_url: None,
            location: None,
            facility: None,
            plan: None,
            userdata: None,
            root_password: None,
            href: None,
            project: None,
            project_lite: None,
            volumes: None,
            hardware_reservation: None,
            ssh_keys: None,
            ip_addresses: None,
            provisioning_events: None,
        }
    }
}


