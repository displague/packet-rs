/*
 * Packet API
 *
 * This is the API for Packet. Interact with your devices, user account, and projects.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@packet.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Project {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    #[serde(rename = "max_devices", skip_serializing_if = "Option::is_none")]
    pub max_devices: Option<serde_json::Value>,
    #[serde(rename = "members", skip_serializing_if = "Option::is_none")]
    pub members: Option<Vec<crate::models::Href>>,
    #[serde(rename = "memberships", skip_serializing_if = "Option::is_none")]
    pub memberships: Option<Vec<crate::models::Href>>,
    #[serde(rename = "network_status", skip_serializing_if = "Option::is_none")]
    pub network_status: Option<serde_json::Value>,
    #[serde(rename = "invitations", skip_serializing_if = "Option::is_none")]
    pub invitations: Option<Vec<crate::models::Href>>,
    #[serde(rename = "payment_method", skip_serializing_if = "Option::is_none")]
    pub payment_method: Option<crate::models::Href>,
    #[serde(rename = "devices", skip_serializing_if = "Option::is_none")]
    pub devices: Option<Vec<crate::models::Href>>,
    #[serde(rename = "ssh_keys", skip_serializing_if = "Option::is_none")]
    pub ssh_keys: Option<Vec<crate::models::Href>>,
    #[serde(rename = "volumes", skip_serializing_if = "Option::is_none")]
    pub volumes: Option<Vec<crate::models::Href>>,
    #[serde(rename = "bgp_config", skip_serializing_if = "Option::is_none")]
    pub bgp_config: Option<crate::models::Href>,
    #[serde(rename = "customdata", skip_serializing_if = "Option::is_none")]
    pub customdata: Option<String>,
}

impl Project {
    pub fn new() -> Project {
        Project {
            id: None,
            name: None,
            created_at: None,
            updated_at: None,
            max_devices: None,
            members: None,
            memberships: None,
            network_status: None,
            invitations: None,
            payment_method: None,
            devices: None,
            ssh_keys: None,
            volumes: None,
            bgp_config: None,
            customdata: None,
        }
    }
}


