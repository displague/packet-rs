/*
 * Packet API
 *
 * This is the API for Packet. Interact with your devices, user account, and projects.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@packet.com
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use std::rc::Rc;

use std::option::Option;

use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method `find_spot_market_prices`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FindSpotMarketPricesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `find_spot_market_prices_history`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FindSpotMarketPricesHistoryError {
    UnknownValue(serde_json::Value),
}


    pub async fn find_spot_market_prices(configuration: &configuration::Configuration, facility: Option<&str>, plan: Option<&str>) -> Result<crate::models::SpotMarketPricesList, Error<FindSpotMarketPricesError>> {
        let client = &configuration.client;

        let uri_str = format!("{}/market/spot/prices", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = facility {
            req_builder = req_builder.query(&[("facility", &s.to_string())]);
        }
        if let Some(ref s) = plan {
            req_builder = req_builder.query(&[("plan", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("X-Auth-Token", val);
        };

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<FindSpotMarketPricesError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn find_spot_market_prices_history(configuration: &configuration::Configuration, facility: &str, plan: &str, from: &str, until: &str) -> Result<crate::models::SpotPricesHistoryReport, Error<FindSpotMarketPricesHistoryError>> {
        let client = &configuration.client;

        let uri_str = format!("{}/market/spot/prices/history", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("facility", &facility.to_string())]);
        req_builder = req_builder.query(&[("plan", &plan.to_string())]);
        req_builder = req_builder.query(&[("from", &from.to_string())]);
        req_builder = req_builder.query(&[("until", &until.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("X-Auth-Token", val);
        };

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<FindSpotMarketPricesHistoryError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

